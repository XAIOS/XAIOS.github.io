<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rich Text in WeApp</title>
      <link href="/2018/12/WeAppRichText/"/>
      <url>/2018/12/WeAppRichText/</url>
      
        <content type="html"><![CDATA[<p><em>About：通过正则表达式对富文本内容进行简单的二次处理，使其适应微信小程序的 rich-text 组件</em></p><a id="more"></a><h1>前言</h1><p>微信小程序中提供了 <code>&lt;rich-text /&gt;</code> 组件，为后端在前端插入富文本提供了接口，但其存在的限制非常多，存在的问题也不少，其中最主要的两个问题，是默认字体控制，和图片最大宽度。在 HTML5 开发中，这两个问题可以通过全局 style 或别的什么形式简单处理，但在小程序中这并不能实现，因为 <code>&lt;rich-text /&gt;</code> 组件拦截了大部分外部样式对其内容的影响，也在内部屏蔽了 <code>&lt;style&gt;</code> 标签，要修饰内部元素的话，成本是比较高的，这也需要后台开发人员以及所选的富文本编辑器的支持，理论上能实现，但通常情况下实现起来不现实，下面简单介绍一个纯前端的补丁方案，用于解决这两个问题。</p><h1>字体控制</h1><p>无论是普通的 HTML5 站点还是小程序，或是别的相似的产品，都存在一个和字体大小相关的问题，那就是换行或缩进生成的空白文本节点，导致的元素间距与所设置不一致的情况，因为即使是空白的无内容的文本，也会受字体大小影响而占用一定大小的空间，所以一般情况下，开发的时候会在 css reset 中将 <code>font-size</code> 设置为 0。</p><p>在小程序中，推荐在 <code>app.wxss</code> 中在 <code>page</code> 的样式上添加设置，但这样子会影响 <code>&lt;rich-text /&gt;</code> 组件内的字体大小，在富文本编辑器没设置字体大小的情况下，文本内容就不可见了，即使是不写在全局，只写到不影响富文本的地方，也会因为编辑器未设置字体大小，导致字体显示异常，通常是表现为大得离谱。</p><p>修改富文本插件通常是比较麻烦的，所以在将富文本内容传递到 <code>nodes</code> 属性中之前，可以简单地包裹一层：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RichText</span>(<span class="params">raw</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;div style="font-size:14px;"&gt;<span class="subst">$&#123;raw&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抛砖引玉，通过类似的方式，可以很简单地操作默认字体，解决一个不算难，但很恶心的问题。</p><h1>图片限制</h1><p>后台上传的图片如果没设置宽度，也没被富文本编辑器限制的话，会以原图大小的形式展示，最常见的问题，就是宽度过大，溢出了富文本容器，导致布局异常。</p><p>而最简单直接也几乎不影响布局的方案，就是为每一个图片设置多一条样式：<code>max-width: 100% !important;</code>，下面同样通过纯前端的方式打个补丁，同时结合字体控制部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RichText</span>(<span class="params">raw</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pre = <span class="string">'style="max-width:100% !important;'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> imgs = raw.match(<span class="regexp">/&lt;img[^&gt;]*&gt;/g</span>)</span><br><span class="line">  imgs &amp;&amp; imgs.forEach(<span class="function"><span class="params">i</span> =&gt;</span> raw = raw.replace(i, i =&gt; <span class="regexp">/style="/</span>.test(i) ? i.replace(<span class="string">'style="'</span>, pre) : i.replace(<span class="string">'&lt;img'</span>, <span class="string">`&lt;img <span class="subst">$&#123;pre&#125;</span>"`</span>)))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;div style="font-size:14px"&gt;<span class="subst">$&#123;raw&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单地循环替换，为每个 <code>img</code> 标签添加了最大宽度限制，高度自动根据宽度和比例进行变化，容器内的布局得以变得符合预期。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Suit Element</title>
      <link href="/2018/05/SuitElement/"/>
      <url>/2018/05/SuitElement/</url>
      
        <content type="html"><![CDATA[<p><em>About：简单的几条公式，算出元素在不同尺寸屏幕上应有的宽和高，配合百分比定位，完美适配各种机型</em></p><a id="more"></a><h1>前言</h1><p>接触过移动端开发的都清楚，要适配页面是很累的，毕竟世界上有着非常多不同尺寸比例的屏幕，瘦长的有 iPhone X 这样子的 375x812，矮胖的 iPhone 4 那样子的 320x480，在宽度接近的情况下高度相差近了一半，如果使用按宽适配的适配方案，在可滚动长屏页面上是没问题的，但往往有需要开发单屏页面的需求，这个时候就要求开发者在不同比例的手机上实现同一张设计图内容了，毕竟针对不同机型出相应的设计图，开发成本是很高的。</p><p>业界常见的移动端适配方案，有 flexible 等主张的使用 rem 单位进行适配，也有使用百分比进行处理的，但其实开发不需要那么复杂，一条简单的算式就可以完成元素尺寸的计算了，将算式封装好之后，整个适配过程就可以简单概括为：</p><ul><li><p>查看元素在设计图中的尺寸</p></li><li><p>往方法中传入对应的宽高</p></li><li><p>js 自动计算在当前屏幕中应有的宽高</p></li><li><p>用百分比对元素进行定位或进行其他后续处理</p></li></ul><p>话不多说，下面简单说下这条算式的核心部分</p><h1>Suit</h1><p>核心部分的算是封装后会是这个样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Suit</span>(<span class="params">w, h</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = w / h</span><br><span class="line">  w /= <span class="number">720</span></span><br><span class="line">  h = h / <span class="number">1135</span> * innerHeight</span><br><span class="line"></span><br><span class="line">  w = h * s &gt; innerWidth * w ? innerWidth * w : h * s</span><br><span class="line">  h = w / s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法传入两个参数，分别代表要适配元素的宽和高，至于 720 和 1135 分别是设计图的宽以及高。</p><ul><li><p>第一步先算出它的宽高比 <code>s</code></p></li><li><p>第二步算出它的宽和设计图的宽的比例</p></li><li><p>第三步做了两件事，算出它的高和设计图的高的比例，并且用这个比例乘以 <code>innerHeight</code>，也就是屏幕的高度，这个是挂载在 window 对象上的属性，不同场景下需要换不同的方法去获取这个数的值以达预期</p></li><li><p>第三步已经算出了元素的高在当前屏幕上应该是多少，接下来就要计算元素的宽度了，由比例 <code>s</code> 可求出当前的宽度，但需要注意这个时候的宽并不是最终值，高也不是，因为到这里为止都是按屏幕高度去适配的，如果高度一样而宽度不一样的情况，这个元素就会变形了，所以第四步用了一个三元表达式，也就是一个简写的 <code>if</code> 语句，去算元素在当前屏幕上应有的宽度</p></li><li><p>如果已算出的高度乘以原宽高比大于屏幕宽度乘以元素宽度与设计图宽度的比值，那么可以知道当前算出的宽度是过大的，这个时候宽度的值应该取屏幕宽度乘以元素宽和设计图宽的比值，否则就可以直接取已算出的高度和原宽高比的乘积</p></li><li><p>最后一步，用已经算出的真实宽度再除以原宽高比，得出真实高度，其实如果上一步获得的宽度就是由高和宽高比得出的，这一步算是多余，不过没必要就此多作判断</p></li><li><p>至此，就可以通过输入元素的宽高，算出在对应屏幕中应有的尺寸了，要注意的是这里有两组常量，一组是设计图中的宽高，第二组是屏幕的宽高，这两组常量需要控制好，以免算出异常的值</p></li></ul><p>这段算式在我几个项目的迭代中逐步精简为这个形式，已有足够的项目实践去验证其确切性，不过在实际开发中还是需要对其进行一定的处理，下面简单地说下在不同场景下这段算式的应用。</p><h2>普通 HTMl5 页面 x Vue 框架</h2><p>在 Vue 中使用这段算式的话，怕是最舒服的了，因为 Vue 中提供了自定义指令这个 API，在需要大量适配元素的情况下可以大大减少开发成本，先亮 js 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  directives: &#123;</span><br><span class="line">    suit: &#123;</span><br><span class="line">      inserted(el, val) &#123;</span><br><span class="line">        <span class="keyword">var</span> [w, h] = val.expression.split(<span class="string">','</span>)</span><br><span class="line">        <span class="keyword">var</span> s = w / h</span><br><span class="line">        w /= <span class="number">720</span></span><br><span class="line">        h = h / <span class="number">1135</span> * innerHeight</span><br><span class="line"></span><br><span class="line">        w = h * s &gt; innerWidth * w ? innerWidth * w : h * s</span><br><span class="line">        h = w / s</span><br><span class="line"></span><br><span class="line">        el.style.width = <span class="built_in">Math</span>.ceil(w) + <span class="string">'px'</span></span><br><span class="line">        el.style.height = <span class="built_in">Math</span>.ceil(h) + <span class="string">'px'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后是被实例化前的 HTML 代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-suit</span>=<span class="string">10,20</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就这样，当这个 img 元素被插入到 DOM 的时候，就会被计算它的一个宽高值，注意这里需要使用 px 作单位，默认的 viewport 缩放是 1，实际开发的时候需要注意这一点。</p><h2>普通方法封装</h2><p>自定义指令虽好，但并不是什么情况下都可以使用，比如 Canvas 绘图时的尺寸计算，这个时候对算式进行另一种形式的简单封装即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Suit</span>(<span class="params">w, h, e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = w / h</span><br><span class="line">  w /= <span class="number">720</span></span><br><span class="line">  h = h / <span class="number">1135</span> * innerHeight</span><br><span class="line"></span><br><span class="line">  w = h * s &gt; innerWidth * w ? innerWidth * w : h * s</span><br><span class="line">  h = w / s</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!e) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      w: <span class="built_in">Math</span>.ceil(w),</span><br><span class="line">      h: <span class="built_in">Math</span>.ceil(h)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  e.width = <span class="built_in">Math</span>.ceil(w)</span><br><span class="line">  e.height = <span class="built_in">Math</span>.ceil(h)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候就这样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Suit(<span class="number">10</span>, <span class="number">20</span>, obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> suit = Suit(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>添加一个参数，用于传入需要计算尺寸的元素，直接对其尺寸赋值，如果不传入的话，就返回计算的结果。</p><h2>微信小程序单页</h2><p>微信小程序提供了 rpx 这个 css 单位用于实际开发，750rpx 相当于 100% 的宽度，让我们可以很方便地进行按宽适配，但有时候我们还是需要开发单屏应用的，这个时候需要同时按宽按高适配，就如上面的算式一样，单纯的按宽始终无法满足开发需求。</p><p>但上面的基本算式以及其变种都是依赖 window 对象上挂载的屏幕宽高信息进行计算的，众所周知，微信小程序没有 window 以及 document 对象，所以要实现需求，需要稍微进行一些处理。</p><p>在 <code>app.js</code> 中注册全局方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s_w, s_h</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Suit</span>(<span class="params">w, h</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!s_h) &#123;</span><br><span class="line">    <span class="keyword">var</span> screen = wx.getSystemInfoSync()</span><br><span class="line">    s_w = screen.windowWidth</span><br><span class="line">    s_h = screen.windowHeight</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> s = w / h</span><br><span class="line">  w /= <span class="number">750</span></span><br><span class="line">  h = h / <span class="number">1206</span> * s_h</span><br><span class="line"></span><br><span class="line">  w = h * s &gt; s_w * w ? s_w * w : h * s</span><br><span class="line">  h = w / s</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    w: <span class="built_in">Math</span>.ceil(w),</span><br><span class="line">    h: <span class="built_in">Math</span>.ceil(h)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">App(&#123; Suit &#125;)</span><br></pre></td></tr></table></figure><p>在相应的 wxml 文件中写点诡异的东西：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">'width:&#123;&#123;w&#125;&#125;px;height:&#123;&#123;h&#125;&#125;px;'</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相应的页面 js 中这样子写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Suit &#125; = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    w: <span class="number">0</span>,</span><br><span class="line">    h: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad() &#123;</span><br><span class="line">    <span class="keyword">var</span> size = Suit(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      w: size.w,</span><br><span class="line">      h: size.h</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>事先说明，小程序上面的实现是没有太多实践验证的，以上黑科技可以用，但微信小程序是个坑，指不定哪天就出事了，所以且行且谨慎吧。</p><p>下面解释一下以上代码：</p><ul><li><p>在全局中注册方法就不用多说了，为了可以在多页面中调用同一个方法，自然是要放全局的</p></li><li><p>小程序提供了 <code>wx.getSystemInfoSync</code> 方法用于同步获取设备信息，通过这个方法就可以获取到相当于 <code>innerWidth</code> 和 <code>innerHeight</code> 的值</p></li><li><p>由于方法调用顺序的问题，为了保证可以在计算的时候获取到屏幕宽高，所以要在方法体内去获取，以免在小程序一开始启动就调用计算的时候因为未获取到屏幕信息而使计算结果返回 0</p></li><li><p>注册了两个外部变量用于保存宽和高的数据，如果已经有值的话就不需要重新获取设备信息，以优化性能</p></li><li><p>wxml 中用到的单位是 px 而非 rpx，这是因为使用算式的情况下不需要考虑屏幕的像素比，使用 rpx 反而会导致展示异常</p></li><li><p>页面 js 中算出对应的值后通过 <code>setData</code> 方法刷新页面，达到预期效果</p></li></ul><p>以上。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hack WeApp</title>
      <link href="/2018/03/HackWeApp/"/>
      <url>/2018/03/HackWeApp/</url>
      
        <content type="html"><![CDATA[<p><em>About：封装微信小程序中的 setData 方法，像 Vue 一样，通过直接修改 this 的属性，实现视图更新</em></p><a id="more"></a><h1>前言</h1><p>实际上这个方法在几个月前就已经被我给 hack 出来了，但因为某（ge）些（ren）原（tai）因（lan），一直拖到今天才写下这篇博文，用以记载我开发小程序几个月来，最大的收获。</p><p>微信小程序是什么，在 2018 年的今天已经不需要再多叙述了，它通过对底层的高度封装以及简单的 API 暴露，让开发者可以简答地进行复杂应用的开发，虽然看起来很厉害，但将复杂的事情变简单，是很不容易的，所以自小程序诞生以来，官方的 bug 就一直没有停止过修复，一些架构开发初期的问题也逐渐暴露出来（也可能是因为情况需要不得不采用的方案，但在使用者看来的确是架构设计的问题，这就见仁见智了），其中最为明显的，就是视图更新的控制了。</p><p>在微信小程序出来之前，Vue 诞生了，其直接通过操作 this （Vue 实例）上的属性更新视图的方式一直为开发者所喜爱（笔者未使用过其他框架，描述之处若有错误，还望指正），而小程序的编程风格和 Vue 是相类似的，只是视图的更新需要借助 this 上的一个 API，<code>this.setData</code> 来实现，也就是为了更新视图你不得不写下至少三行代码，在需要多次更新视图的业务情况下，这样子的代码在某种程度上来说是不好维护的。</p><p>在 2017 年的某一天，看过 Vue 基本原理解析的我，在开发小程序的时候，想到了将 Vue 的原理搬到小程序上，经过多次测试与封装，完成了十余行的代码，实现了对小程序的 hack。</p><h1>Hack</h1><p>话不多说，先码为敬，在 <code>app.js</code> 中写入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hack</span>(<span class="params">page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hack = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> page.data)</span><br><span class="line">    <span class="keyword">if</span> (i[<span class="number">0</span>] != <span class="string">'_'</span>)</span><br><span class="line">      hack[i] = &#123;</span><br><span class="line">        get: <span class="function"><span class="params">()</span> =&gt;</span> page.data[i],</span><br><span class="line">        set: <span class="function"><span class="params">val</span> =&gt;</span> page.setData(&#123; [i]: val &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperties(page, hack)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">APP(&#123; Hack &#125;)</span><br></pre></td></tr></table></figure><p>使用方法如下，在 <code>page.js</code> 中写入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Hack &#125; = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  onLoad() &#123;</span><br><span class="line">    Hack(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此处代码使用的 ES2015 语法包括箭头函数、解构赋值、对象方法简写、块级变量声明，此处不作扩展。</p><p>至此，就可以通过修改 <code>this</code> 的属性值来更新视图了，但需要注意的是，和 <code>this.setData</code> 方法一样，能用于更新视图的属性只有在 <code>this.data</code> 中的属性。</p><p>还有一点需要注意的是，这段 hack 代码只设置了属性的 setter 和 getter，换言之只有在触发了属性的 setter 的情况下才会触发 <code>this.setData</code> 方法，数组和对象的一些扩展方法如 <code>push</code> 等无法触发属性的 setter，所以如果需要更新引用类型的对象的话，需要手动进行 setData，或通过如下方式触发属性的 setter：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.temp = <span class="keyword">this</span>.temp <span class="comment">// [] || &#123;&#125;</span></span><br></pre></td></tr></table></figure><h1>原理</h1><p>原理其实并不复杂，和 Vue 的原理一样，通过设置 <code>this</code> 中属性的 setter，来调用 <code>this.setData</code> 方法，下面对每行代码作出解析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hack</span>(<span class="params">page</span>) </span>&#123;                           <span class="comment">// 声明一个 Hack 方法，接收一个参数，为页面的 this 值</span></span><br><span class="line">  <span class="keyword">var</span> hack = &#123;&#125;                                 <span class="comment">// 创建一个对象，用于批量声明 this 上的属性</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> page.data)                      <span class="comment">// 遍历 this.data 属性</span></span><br><span class="line">    <span class="keyword">if</span> (i[<span class="number">0</span>] != <span class="string">'_'</span>)                            <span class="comment">// 如果当前遍历的属性首字符不为下划线，继续下一步，以过滤 this.data 中的预设属性</span></span><br><span class="line">      hack[i] = &#123;                               <span class="comment">// 以当前遍历的属性值为键名，在 hack 对象中创建一个新的属性</span></span><br><span class="line">        get: <span class="function"><span class="params">()</span> =&gt;</span> page.data[i],                <span class="comment">// 设置当前属性的 getter 方法，在获取该属性值时会触发，此处设置为返回 this.data 中该属性的值</span></span><br><span class="line">        set: <span class="function"><span class="params">val</span> =&gt;</span> page.setData(&#123; [i]: val &#125;)  <span class="comment">// 设置当前属性的 setter 方法，在设置该属性值时会触发，此处设置为调用 this.setData 更新视图</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperties(page, hack)           <span class="comment">// 批量甚至属性值，在 this 上设置 hack 中的各个属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">APP(&#123; Hack &#125;)                                   <span class="comment">// 将 Hack 方法挂载到 APP 对象上，使其可通过 getApp() 在全局环境中获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// page.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Hack &#125; = getApp()                       <span class="comment">// 获取 Hack 方法</span></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  onLoad() &#123;                                    <span class="comment">// 页面加载完毕后立即触发</span></span><br><span class="line">    Hack(<span class="keyword">this</span>)                                  <span class="comment">// 将 this 传入 Hack 方法中，完成 Hack 操作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>从源码或解析中可知，使用此方法是有一定副作用的，当然其中部分副作用可以通过修改 Hack 的代码来消除，至于怎么改就是各位看官的事了，下面简单总结下副作用：</p><ul><li><p><code>this.data</code> 中首字符为下划线的属性会免疫当前 hack 操作，因为 <code>this.data</code> 中有一个预设的属性是以下划线开头的，需要将其移除，以保证程序的可预测性。</p></li><li><p>hack 完成后 <code>this</code> 对象上会存在与 <code>this.data</code> 中同名的多个属性值，所以程序中的自定义属性不能与 <code>this.data</code> 中的属性同名。</p></li><li><p>hack 后设置 <code>this</code> 更新视图相对于是逐个调用 <code>this.setData</code>，所以无法做到直接调用 <code>this.setData</code> 时批量更新视图，小程序中可能存在的对于更新视图的优化代码会被无效化。</p></li></ul><p>副作用虽有，但影响其实是不大的，虽然会对性能有影响，但开发的过程会因为十余行代码的 hack，而变得很愉快。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Just Babel</title>
      <link href="/2018/03/JustBabel/"/>
      <url>/2018/03/JustBabel/</url>
      
        <content type="html"><![CDATA[<p><em>About：不依赖构建工具，借助 babel-cli 及 node.js ，拥抱 ES2015 或更高的语法</em></p><a id="more"></a><h1>前言</h1><p>ES2015 标准为开发者带来了很多新的 API 和语法，如箭头函数和模板字符串等，大大优化了我们的开发体验，但考虑到 js 的运行依赖于运行时环境，所以必须要对代码进行兼容性处理。</p><p>但 ES2015 真的很棒，棒到只要尝试一次，就令人不想再去写低级的兼容代码，并且兼容代码是很无趣的，很机械化的，而机械化的事情在程序员的思想里面，就应该交由机械去处理。</p><p>如果一件事可以通过程序解决，就应该交由程序处理。</p><p>所以在后来出现了 Babel 之类的后处理工具，可以借助各种插件，对编写好的代码进行二次处理，其主要用处之一，就是将按 ES2015 标准书写的代码转换为更低级的语法，如 ES5，甚至 ES3 等，当然，可以做什么是看安装了什么插件的，安装最少的插件就可以完成语法的转换，但如果需要进行 API 的兼容，就需要一些 polyfill 了，可以自己写，也可以上 <a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">MDN</a> 搜，在引入 polyfill 时最好考虑按需引入以及按当前需要情况处理 polyfill，此处不作过多描述。</p><p>后处理工具很多，下面介绍的方法所选用的是 Babel，可以通过访问它的<a href="https://babeljs.cn" target="_blank" rel="noopener">中文站</a>，获得更多的了解。</p><p>说起使用 Babel，很多人会第一时间想到使用各种构建工具，如 Webpack 和 Gulp 等等，但构建工具的配置是比较麻烦的，即使有免于配置的工具，为了使用一个 Babel 而引入过多额外的东西进项目里面，某种意义上是不值得的，因为，我们完全可以单纯地使用 Babel，只转换我们需要转换的 js，而不用考虑其他的文件资源，遵循我们的单一职责原则。</p><p>下面，将简单说明如何使用 Babel 转换项目中的 js 文件，且把对项目的影响降到最低，并给出自己构建的一个项目框架以供参考，优化部分是针对 Windows 平台的，OS X 平台和 Linux 平台的可以自行了解相关平台下类似 bat 的批处理文件（可执行文件），其余部分不区分平台。</p><h1>一、安装 Node.js</h1><p>访问 Node.js 的中文网 <a href="http://nodejs.cn/download" target="_blank" rel="noopener">nodejs.cn</a>，根据系统版本下载对应的 Node.js 安装包，并进行安装，安装过程中一般情况下无需进行额外的配置，可以选择一直下一步，最后完成安装操作，关闭安装程序。</p><p>在终端运行以下代码验证是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">node</span> -v</span><br></pre></td></tr></table></figure><p>Node.js 提供 babel 及其余所需组件的运行环境，要安装 babel ，还需要借助 NPM， NPM 在高版本的 Node.js 中自带，也可以自行安装。</p><h1>二、安装 Babel-CLI 及所需组件</h1><p>Babel 提供了一个命令行的版本，以供我们在终端中可以调用 Babel，虽然官方文档里面推荐以局部的方式安装 Babel-CLI，但经过考虑后我推荐在全局中安装，当然各位也可以按自己的实际情况来作选择。</p><p>执行以下代码，在全局环境中安装 Babel-CLI：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> i babel-cli -g</span><br></pre></td></tr></table></figure><p>这样子就可以在当前用户的每一个目录终端中使用 Babel 的命令行了。</p><p>为了便于项目的开发，我选用 D 盘根目录下的 Web 文件夹作为开发目录，为了能够将 Babel 轻松地作用在每个项目中，将会在 Web 目录中安装相关组件。</p><p>在 Web 目录中唤起 cmd 或 powershell，执行以下代码，安装相关组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> i babel-preset-env</span><br></pre></td></tr></table></figure><p>以上代码执行后将会下载 Babel 转换 ES2015 语法所需的基本插件 <code>preset-env</code>，同时会在同一目录下生成 <code>node_modules</code> 文件夹以及 <code>package-lock.json</code> 文件，json 文件可以自由删除，但 <code>node_modules</code> 文件夹不能删除，因为里面存放的就是上面安装的相关组件。</p><p>在最后，为了能够使用 Babel，还需要写下一个配置文件，同样是在 Web 目录下，创建一个 <code>.babelrc</code> 文件，可以通过编辑器生成，或在 cmd 或 powershell 中输入以下代码，生成文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ notepad .babelrc</span><br></pre></td></tr></table></figure><p>执行后，记事本会提示该文件不存在，是否创建，点击确定即可，然后在其中写入如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存文件，至此，准备工作就完成了，可以跟着 Babel 中文站提供的一些 Demo 试试看效果，此处就不作详细描述了。</p><p>额外补充一句，Babel 默认是使用严格模式处理输出的代码的，严格模式下对代码的要求比较多，实际开发中如果想编写更为自由的代码，可以通过编辑 <code>.babelrc</code> 文件进行配置，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [<span class="string">"env"</span>, &#123;</span><br><span class="line">      <span class="attr">"modules"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然取消严格模式可以让开发变得更加自由，不过这种自由还是需要建立在可维护以及可协作上的，作为开发人员，得对自己代码负责。</p><h1>三、优化功能，方便开发</h1><p>完成上面的步骤，虽然是可以使用了，但即使是使用 Babel 提供的文件检测方法，仍不免觉得使用起来很累，毕竟每次都需要打开终端，到目的目录后再执行相关命令，是很繁琐的。</p><p>按着一贯的套路，既然终端可以完成的操作，那就是批处理可以完成的操作，把相关的方法写在批处理文件里面，讲道理就没问题了，于是想到了使用 bat 文件。</p><p>新建 bat 文件，键入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">:: 关闭终端回显</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:: 设置变量，通过修改变量值切换转化路径</span><br><span class="line"><span class="built_in">set</span> NAME=项目名字</span><br><span class="line">:: 输出空行，美化终端显示</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">:: 输出当前监听项目名字</span><br><span class="line"><span class="built_in">echo</span>   正在监听项目：%NAME%</span><br><span class="line">:: 输出空行，美化终端显示</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">:: 执行 babel 命令，监听指定目录内容，并将该目录内 js 文件转换到指定目录中，覆盖同名文件</span><br><span class="line">babel D:\Web\project_%NAME%\Scripts\Index.source -w -d D:\Web\project_%NAME%\Scripts\Index</span><br></pre></td></tr></table></figure><p>以上命令执行完后会监听 <code>D:\Web\project_项目名字\Scripts\Index.source</code> 目录内的 js 文件变动，并将其转码覆盖到 <code>D:\Web\project_项目名字\Scripts\Index</code> 目录中。</p><p>因为 bat 文件在 Windows 平台下是可执行文件，里面的每一行命令会依次被 cmd 执行，相对于我们双击这个 bat 文件后会自动在 cmd 中依次键入了以上的命令（两个冒号后跟着的是注释内容，不会被执行），这就免去了我们打开终端然后再进行目录监听的繁琐。</p><p>为了便捷开发，用于执行 babel 的 bat 文件可以多复制几份，分别作用于不同的监听目录，鉴于同时开发的项目数量一般不会太高，即使这样子做也不会使目录过于凌乱，已经不会再进行开发的项目，bat 文件删掉也罢，要是从开，复制一份改个变量就可以执行了。</p><h1>四、进步优化，压缩代码</h1><p>以上的步骤虽然可以完成一个监听文件变化并进行语法转换的脚本，但在实际开发中还有其它更多的需求，其中最主要的可能就是代码压缩。</p><p>Babel 提供了多种插件用于处理输出的代码，如果有特殊需求，还可以自行编写插件，具体可以看<a href="https://babeljs.cn/docs/plugins/" target="_blank" rel="noopener">中文站上的文档</a>。</p><p>压缩代码后的文件体积通常会减少很多，而且因为变量名等的混淆，还可以简单防止别人对代码进行破解，当然如果要防破解的话，还是需要专业的混淆处理，代码压缩所起到的混淆作用，还是很小的。</p><p>在上文说到的 Web 目录下唤起 cmd 或 powershell，输入以下代码，安装压缩插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> i babel-minify</span><br></pre></td></tr></table></figure><p>然后编辑 <code>.babelrc</code> 文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"minify"</span>, <span class="string">"env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要取消严格模式，编辑为以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"minify"</span>, [<span class="string">"env"</span>, &#123;</span><br><span class="line">      <span class="attr">"modules"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行之前的 bat 文件，就可以输出压缩后的文本了，如果不需要代码压缩而只需要一些简单的后期处理（如删除无用代码等），可以上中文站上搜索对应插件并按说明进行安装。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Normalize CSS in Web</title>
      <link href="/2017/12/NormalizeCSSInWeb/"/>
      <url>/2017/12/NormalizeCSSInWeb/</url>
      
        <content type="html"><![CDATA[<p><em>About：简单介绍 Web 开发中的 CSS Reset 以及 Normalize CSS ，并针对微信网页开发以及微信小程序开发，分享一份自用的 Normalize 方案</em></p><a id="more"></a><h1>一、CSS Reset</h1><p>在 Web 开发还是刀耕火种的年代，浏览器的世界堪比五胡十六国，除了主流的 Chrome、FireFox、IE 外，还有很多其他的国外的浏览器、国产的套壳浏览器，以及一些技术宅自行开发的浏览器，对于用户来说选择多样，百花齐放，也说得上是舒服，但对于需要兼容大部份浏览器的 Web 前端开发者来说，就很是痛苦了。</p><p>到后来 JQuery 横空出世，兼容了各大主流浏览器的 API 并进行封装，使 JavaScript 的开发变得舒服了起来，虽然现在 JQuery 没有以前那么火了，甚至会被一部分（包括我）的开发者嫌弃，但在那个年代，JQuery 是伟大的。</p><p>但浏览器间的差距并不是几个 JS 的 API 可以说得清的，除了逻辑处理，渲染机制和样式差异也是为开发者所诟病，但这也是没办法的事，毕竟每个厂商眼中的 Web 都是不一样的。</p><p>自然而然的，在 Web 开发到了一个时期后，CSS Reset 的概念出现了，它主张破而后立，将所有浏览器的样式表现差异统统抹除，留下白纸一张，再任由开发人员布局，下面贴一份 <a href="http://nec.netease.com/framework/css-reset.html" target="_blank" rel="noopener">NEC</a> 上的 CSS Reset：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* nec css reset at 2012-11-15 */</span></span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">div</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">p</span>,<span class="selector-tag">blockquote</span>,<span class="selector-tag">pre</span>,<span class="selector-tag">hr</span>,<span class="selector-tag">figure</span>,<span class="selector-tag">table</span>,<span class="selector-tag">caption</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">input</span>,<span class="selector-tag">button</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">menu</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">header</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">section</span>,<span class="selector-tag">article</span>,<span class="selector-tag">aside</span>,<span class="selector-tag">nav</span>,<span class="selector-tag">hgroup</span>,<span class="selector-tag">address</span>,<span class="selector-tag">figure</span>,<span class="selector-tag">figcaption</span>,<span class="selector-tag">menu</span>,<span class="selector-tag">details</span>&#123;<span class="attribute">display</span>:block;&#125;</span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">caption</span>,<span class="selector-tag">th</span>&#123;<span class="attribute">text-align</span>:left;<span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">img</span>,<span class="selector-tag">iframe</span>,<span class="selector-tag">abbr</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">i</span>,<span class="selector-tag">cite</span>,<span class="selector-tag">em</span>,<span class="selector-tag">var</span>,<span class="selector-tag">address</span>,<span class="selector-tag">dfn</span>&#123;<span class="attribute">font-style</span>:normal;&#125;</span><br><span class="line"><span class="selector-attr">[hidefocus]</span>,<span class="selector-tag">summary</span>&#123;<span class="attribute">outline</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">small</span>&#123;<span class="attribute">font-size</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-tag">sup</span>,<span class="selector-tag">sub</span>&#123;<span class="attribute">font-size</span>:<span class="number">83%</span>;&#125;</span><br><span class="line"><span class="selector-tag">pre</span>,<span class="selector-tag">code</span>,<span class="selector-tag">kbd</span>,<span class="selector-tag">samp</span>&#123;<span class="attribute">font-family</span>:inherit;&#125;</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>,<span class="selector-tag">q</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">content</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">textarea</span>&#123;<span class="attribute">overflow</span>:auto;<span class="attribute">resize</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">label</span>,<span class="selector-tag">summary</span>&#123;<span class="attribute">cursor</span>:default;&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">button</span>&#123;<span class="attribute">cursor</span>:pointer;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">em</span>,<span class="selector-tag">strong</span>,<span class="selector-tag">b</span>&#123;<span class="attribute">font-weight</span>:bold;&#125;</span><br><span class="line"><span class="selector-tag">del</span>,<span class="selector-tag">ins</span>,<span class="selector-tag">u</span>,<span class="selector-tag">s</span>,<span class="selector-tag">a</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">input</span>,<span class="selector-tag">button</span>,<span class="selector-tag">select</span>,<span class="selector-tag">keygen</span>,<span class="selector-tag">legend</span>&#123;<span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.14</span> arial,\<span class="number">5</span>b8b\<span class="number">4</span>f53;<span class="attribute">color</span>:<span class="number">#333</span>;<span class="attribute">outline</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#333</span>;&#125;</span><br></pre></td></tr></table></figure><p>粗略扫一眼，可以看到很多已经渐渐淡出 Web 舞台的 HTML 标签，毕竟这是一份 2012 年的代码，而写下这篇文章的时候，已经快到 2018 年了，这五年间的 Web 世界也是沧海桑田。</p><p>而这五年间，浏览器在样式表现上越发趋向统一，它们的默认样式也慢慢变得一样，虽然说我们还是需要统一化每个浏览器的表现形式，但我们已经不需要书写（copy）那么多的 Reset 代码了，而且，在我们现在以及未来会触及的项目中，也很少会有用到上面全部标签的时候。</p><p>为了写下这篇文章，我做了一点功课，而在查找资料中，我觉得有一类对 CSS Reset 的评价是很中肯且合适的，下面以我自己的话总结一下：</p><blockquote><p>CSS Reset 不是一段功能代码，而是一个概念，目的是去除浏览器样式差异，那份代码怎么写，是要结合时代，结合兼容需求，结合实际项目的</p></blockquote><p>所以 CSS Reset 虽然被人所诟病（代码臃肿，无用代码过多），但实际上这是一个很棒的概念，只是被开发者写错了。</p><h1>二、Normalize CSS</h1><p>CSS Reset 之后，有大神耗费很多的时间和精力去考究了不同浏览器之间的差异，开源出了一份 CSS 文件，名为 Normalize.css ，意为标准化的 CSS。</p><p>Normalize CSS 现在更新到了 7.0 的版本，有详细的文档解释里面的每一行 CSS 代码，长度其实也不大，有兴趣可以去它的<a href="http://necolas.github.io/normalize.css" target="_blank" rel="noopener">官网</a>，下载文件或查看文档，此处就不贴代码了。</p><p>Normalize CSS 的理念比起 CSS Reset 的破而后立，显得更加的平和，它保留了不少浏览器只带的属性，也对一些标签做了表现上的优化调整，但和 CSS Reset 一样，这也是一份被别人总结出来的代码，具体要应用到自己项目当中的时候，也应该对其有一定的了解，以及代码的取舍，毕竟多出来用不到的，也是无用的代码。</p><h1>三、My CSS Reset</h1><p>最后，分享一下我个人结合自身项目需求，移动端开发特性（主要是微信浏览器），以及 CSS Reset 和 Normalize CSS，做出的一份自用的 CSS Reset：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span>, <span class="selector-attr">[v-cloak]</span> &#123;  <span class="comment">/* 隐藏滚动条以及未实例化完全的 Vue 组件 */</span></span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;  <span class="comment">/* 1.去除元素点击时的蓝色遮罩，2.禁用字体缩放 */</span></span><br><span class="line">  <span class="attribute">-webkit-tap-highlight-color</span>: transparent;</span><br><span class="line">  <span class="attribute">-webkit-text-size-adjust</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;  <span class="comment">/* 1.去除页面内边距，2.去除元素间的小间隙 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">article</span>, <span class="selector-tag">section</span>, <span class="selector-tag">main</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">footer</span> &#123;  <span class="comment">/* 块级化 HTML5 元素 */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">hr</span>, <span class="selector-tag">p</span> &#123;  <span class="comment">/* 对常用的元素进行边距消除 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;  <span class="comment">/* 消除无序列表元素内外边距 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;  <span class="comment">/* 1.设置下划线样式，2.移除链接元素底部横线，3.移除描边，4.统一交互颜色 */</span></span><br><span class="line">  <span class="attribute">-webkit-text-decoration-skip</span>: objects;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[disabled]</span> &#123;  <span class="comment">/* 防止 iOS 中被禁用的输入元素显示半透明 */</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span> &#123;  <span class="comment">/* 初始化输入元素 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;  <span class="comment">/* 重置按钮的属性 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;  <span class="comment">/* 重置表格属性 */</span></span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;  <span class="comment">/* 移除列表元素的序号点 */</span></span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>涉及到的标签比较少，但已能满足我的开发需求，最后再贴上一份微信小程序开发时可能需要用到的 CSS Reset：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">page</span> &#123;  <span class="comment">/* 当项目内存在富文本时不可在 app.wxss 中设置，需在需要的页面内设置，或针对含有富文本的页面设置 font-size */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，是否需要用到，还是取决于自己的项目的，希望各位都能在对这方面有一定考究后，有一份自己的 CSS Reset，而不是一味的在网上 copy。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Create live server</title>
      <link href="/2017/12/CreateLiveServer/"/>
      <url>/2017/12/CreateLiveServer/</url>
      
        <content type="html"><![CDATA[<p><em>About：本文需要少少 Node.js 基础和 ES6 语法知识辅助阅读，通过本文，你可以在任意主机搭建服务器环境，当所监听的目录发生文件变化时刷新所有正在访问本主机的设备上的页面</em></p><a id="more"></a><h1>一、事前准备</h1><h2>1. 安装 Node.js</h2><p>访问 Node.js 的中文网 <a href="http://nodejs.cn/download" target="_blank" rel="noopener">nodejs.cn</a>，根据系统版本下载对应的 Node.js 安装包，并进行安装，安装过程中一般情况下无需进行额外的配置，可以选择一直下一步，最后完成安装操作，关闭安装程序。</p><p>在终端运行以下代码验证是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">node</span> -v</span><br></pre></td></tr></table></figure><p>Node.js 提供 live-server 所需的运行环境，要安装 live-server ，还需要借助 NPM， NPM 在高版本的 Node.js 中自带，也可以自行安装。</p><h2>2. 安装 live-server</h2><p>首先准备一个文件夹作为将要被监听的目录，此处默认为 D 盘根目录下的 Web 文件夹，进入该文件夹，并执行命令安装 live-server：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /d D:\Web</span><br><span class="line">$ <span class="built_in">npm</span> i live-server</span><br></pre></td></tr></table></figure><p>等待下载并安装，完成后 Web 文件夹内会生成一个 <code>node_modules</code> 文件夹和一个 <code>package.json</code> 文件，一个 <code>package-lock.json</code> 文件（也有可能没 json 文件），两个 json 文件可以删除，对往后的操作不会造成任何不良影响。</p><h1>二、创建服务器</h1><h2>1. 修改 live-server</h2><p>为了创建更自由的开发环境，建议对 live-server 进行一些修改，已修改好的文件可<a download="index.js" href="/res/live_server.js">点此下载</a>，由于修改的内容偏多，为免篇幅过长，此处不作详述。</p><p>具体修改内容如下：</p><ul><li><p>移除控制台信息输出，配置文件中无需配置此项</p></li><li><p>启动服务器时将不打开浏览器，移除相关配置项</p></li><li><p>默认监听 80 端口</p></li><li><p>忽视 ts 文件修改时对各访问设备的刷新</p></li><li><p>仅监听文件的增加以及修改操作（不包括删除）</p></li><li><p>修改原代码中代码混合的逻辑，直接将插入代码混入到文档尾部，移除需要添加特定标签才能生效的限制，此操作对性能有所影响，但暂未找到更优解（也不打算找）</p></li></ul><p>将下载好的 js 文件复制到 Web 文件夹内的 <code>node_modules\live-server\</code> 路径下，替换原有的 <code>index.js</code> 文件，即可生效。</p><p>即使不做文件替换处理，执行以下操作依旧可以开启一个 live server，不过需要为你的 html 多添加几个标签，如 <code>&lt;body&gt;</code>等，才可让 live-server 生效。</p><h2>2. 创建服务器启动文件</h2><p>在 Web 文件夹内创建一个 js 文件，命名随意，此处默认为 <code>live.js</code>，编辑文件内容为如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Live = <span class="built_in">require</span>(<span class="string">'live-server'</span>)                                     <span class="comment">// 加载 live-server 模块</span></span><br><span class="line"><span class="keyword">const</span> Network = <span class="built_in">require</span>(<span class="string">'os'</span>).networkInterfaces()                       <span class="comment">// 加载系统模块并读取网络接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> Network)                                                <span class="comment">// 循环网络接口信息</span></span><br><span class="line">  <span class="keyword">if</span> (!key.includes(<span class="string">'VM'</span>))                                              <span class="comment">// 过滤虚拟网卡信息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">of</span> Network[key])                                      <span class="comment">// 循环目标网络接口</span></span><br><span class="line">      <span class="keyword">if</span> (item.family == <span class="string">'IPv4'</span> &amp;&amp; item.address != <span class="string">'127.0.0.1'</span>)&#123;        <span class="comment">// 获取非 127.0.0.1 的 IPv4 地址</span></span><br><span class="line">        host = item.address                                             <span class="comment">// 获取 IP 地址</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'\n\t当前监听的 IP 地址为：'</span> + host)                  <span class="comment">// 在控制台输出本机 IP 地址</span></span><br><span class="line">        <span class="keyword">break</span>                                                           <span class="comment">// 跳出循环</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">Live.start(&#123;                                                            <span class="comment">// 配置 live-server 信息并启动服务器</span></span><br><span class="line">  host,                                                                 <span class="comment">// 刚刚获取到的 IP 地址</span></span><br><span class="line">  root: __dirname                                                       <span class="comment">// 监听目录为 live.js 文件当前所在目录</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>关闭文件，在 Web 文件夹下打开终端，执行以下命令，就可以开启服务器了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">node</span> live         // 以 Node.js 运行 live.js 文件</span><br></pre></td></tr></table></figure><p>控制台会输出可以访问到当前电脑的 IP 地址，如果端口号未设置为 80，还需要在 IP 地址后加上所设置的端口号，如果端口被占用将会开启失败，此时可以尝试设置为别的端口或去除端口占用，重新启动服务器。</p><h1>三、见证奇迹之前</h1><p>在 Web 目录（被设定监听的目录）下创建一个 <code>index.html</code> 文件以供访问，内容随意（但必须是一个标准内容的 html 文件），创建完毕后，同一局域网内的设备可以通过浏览器访问到该文件，表示我们的服务器创建已经完毕了。</p><p>在有设备访问的情况下，我们去修改一下 <code>index.html</code> 文件，或是在 Web 目录中新加入一个文件，触发修改目录内容的事件，这个时候可以看到正在访问该文件的浏览器页面被自动刷新了。</p><p><em>但是，如果是微信浏览器，你会发现并不能实现预期的效果。</em></p><p>这是因为微信浏览器屏蔽了 <code>location.reload()</code> 的效果，使刷新的方法失效，这个时候为了能够在微信浏览器上实现预期，我们得去修改一下 live-server 的源码，下面简单介绍下 live-server 的原理。</p><p>为了实现刷新访问设备的效果，live-server 使用了 WebSocket 技术，在服务端与客户端之间建立了双向通信通道，在监听到目录变化的时候，向客户端发送刷新页面，或是重载 CSS 文件的命令。</p><p>为了让客户端能够对命令做出响应，live-server 在客户端访问页面获取文档的时候，对文档作了一个处理，在 <code>body</code> 标签的最后插入了一段生成 WebSocket 通道并注册相关事件的代码。</p><p>至于我上面提供的修改后的源文件，则去掉了这个限制，将代码插入改为了在文档的末端加入代码。</p><p>通过阅读源码和翻阅文件夹加上大胆猜测，我发现 live-server 将那段 script 代码放进了一个文件内，而我们现在要做的，就是修改该文件的内容。</p><p>打开 <code>node_modules</code> 目录下的 <code>live-server</code> 目录下的 <code>injected.html</code> 文件，修改其内容如下（当然你也可以自己去写一下或是在原基础上稍作改动）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">ReLoad</span>(<span class="params">obj, isCSS</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (isCSS) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> [base, search] = obj.href.split(<span class="string">'?'</span>)</span></span><br><span class="line"><span class="javascript">        search = search || <span class="string">''</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> hash = <span class="string">''</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> hash = obj.hash</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> search = obj.search.slice(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> base = obj.origin + obj.pathname</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (search.includes(<span class="string">'reload='</span>))</span></span><br><span class="line"><span class="javascript">        obj.href = obj.href.replace(<span class="regexp">/reload=[^&amp;#]*/</span>, <span class="string">`reload=<span class="subst">$&#123;++search.match(<span class="regexp">/reload=([^&amp;]*)/</span>)[<span class="number">1</span>]&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">else</span> <span class="keyword">if</span> (search)</span></span><br><span class="line"><span class="javascript">        obj.href = <span class="string">`<span class="subst">$&#123;base&#125;</span>?<span class="subst">$&#123;search&#125;</span>&amp;reload=1<span class="subst">$&#123;hash&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">        obj.href = <span class="string">`<span class="subst">$&#123;base&#125;</span>?reload=1<span class="subst">$&#123;hash&#125;</span>`</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">`<span class="subst">$&#123;location.protocol.replace(<span class="string">'http'</span>,<span class="string">'ws'</span>)&#125;</span>//<span class="subst">$&#123;location.host&#125;</span><span class="subst">$&#123;location.pathname&#125;</span>/ws`</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (msg.data == <span class="string">'reload'</span>)</span></span><br><span class="line"><span class="undefined">        ReLoad(location)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">else</span> <span class="keyword">if</span> (msg.data == <span class="string">'refreshcss'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> css <span class="keyword">of</span> <span class="built_in">document</span>.getElementsByTagName(<span class="string">'link'</span>))</span></span><br><span class="line"><span class="javascript">          css.rel == <span class="string">'stylesheet'</span> &amp;&amp; ReLoad(css, <span class="literal">true</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)()</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上修改在原逻辑上增加了以下特性：</p><ul><li><p>在 url 上记录刷新次数</p></li><li><p>支持查询参数以及锚点的记录，刷新后可以更大程度地还原状态，方便开发</p></li></ul><p>此处有一点要注意的是，我用了 ES6 语法，而上面这段代码是要发送到客户端执行的，如果客户端不支持 ES6 的语法，将会失效甚至导致页面白屏，关于这点需要在实际操作时稍微考虑。</p><p>另外因为采用了 WebSocket 技术，部分落后的浏览器会出现不支持的情况，这是无法解决的事情，WebSocket 具体的浏览器支持性可以通过 <a href="https://caniuse.com/#search=Web%20Sockets" target="_blank" rel="noopener">caniuse.com</a> 查看。</p><p>至此，基于 Node.js 和 live-server 的动态服务器已经搭建完毕，所监听的目录下的任何文件变化，都会使所有支持的设备进行刷新或是重绘，可以大大减轻前端开发时的工作量，不需要再不停地刷新各个设备进行调试，撒花 ~ ~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Create blog by Hexo</title>
      <link href="/2017/12/CreateBlogByHexo/"/>
      <url>/2017/12/CreateBlogByHexo/</url>
      
        <content type="html"><![CDATA[<p><em>About：本文将由 0 开始搭建一个 Github 上的部落格，而你只需要一点简单易懂的 markdown 知识，如果需要搭建得更完美，还需要一点编程能力</em></p><a id="more"></a><h1>一、事前准备</h1><h2>1. 安装 Git</h2><p>访问 Git 的<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载网站</a>，根据系统版本下载对应的 Git 安装包，并进行安装，因为一些众所周知的原因，下载速度可能会较慢，可自备梯子。安装过程中一般情况下无需进行额外的配置，可以选择一直下一步，最后完成安装操作，关闭安装程序。</p><h2>2. 安装 Node.js</h2><p>访问 Node.js 的中文网 <a href="http://nodejs.cn/download" target="_blank" rel="noopener">nodejs.cn</a>，根据系统版本下载对应的 Node.js 安装包，并进行安装，安装过程中一般情况下无需进行额外的配置，可以选择一直下一步，最后完成安装操作，关闭安装程序。</p><p>在终端运行以下代码验证是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">node</span> -v</span><br></pre></td></tr></table></figure><p>Node.js 是 Hexo 依赖运行的一个环境，要安装 Hexo ，还需要借助 NPM 这个 Node.js 的包管理工具，当然你也可以选择下载 Hexo 源码手动安装，NPM 在高版本的 Node.js 中自带，也可以选择自行安装。</p><h2>3. 安装 Hexo</h2><p>执行以下代码，在全局环境下安装 hexo-cli：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> i hexo-cli -g</span><br></pre></td></tr></table></figure><p>这样子就可以在当前用户的每一个目录终端中使用 Hexo 的命令行了，选中一个地方，新建一个 <code>Blog</code> 文件夹，以此作为新的部落格的开始。</p><p><em>备注：以下代码以 Windows CMD 为终端示例，默认 Blog 文件夹已被新建于 D盘根目录下</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /d D:\Blog      // 进入 Blog 目录下</span><br><span class="line">$ hexo init          // 初始化 Hexo 项目</span><br><span class="line">$ <span class="built_in">npm</span> install        // 安装 Hexo 项目的依赖</span><br></pre></td></tr></table></figure><p>至此，Hexo 以及它所依赖的 Node.js 环境，上传 Github 所需的 Git 都已被安装完毕。</p><h1>二、Hexo 项目简介及主题安装</h1><h2>1. 目录结构及内容</h2><p>创建完成的 Hexo 目录下包含几个目录，而其中我们需要去了解的，主要是 <code>source</code> 目录以及 <code>themes</code> 目录，还有 <code>_config.yml</code> 文件。</p><p><code>source</code> 目录下，包含的是我们的文章，也就是我们整个部落格的核心部分，我们所编写的文章都要放在这里面，然后运行 Hexo 的命令，生成我们的部落格页面，可以选择手动创建 markdown 文件放进去，也可以使用 Hexo 的命令创建新的文件，此处建议使用 Hexo 的命令生成。</p><p><code>themes</code> 目录下，包含的是我们部落格的主题文件夹，主题可以通过 Hexo 的<a href="https://hexo.io/themes" target="_blank" rel="noopener">主题档案页</a>下载，也可以自行去创作属于自己的主题，或基于下载的主题进行二次创作。</p><p><em>注意：即使是从 <a href="https://github.com" target="_blank" rel="noopener">Github</a> 上下载的主题，也请留意其开源许可证的内容，尊重原创。</em></p><p><code>_config.yml</code> 文件是整个部落格的配置文件，如作者和标题等信息都可在这里面配置，使用的是 YAML 语言，只需要你一点小小的英语基础，或者可以选择谷歌翻译。</p><h2>2. 安装主题</h2><p>Hexo 默认提供的主题可能对你来说不太适合，你可以选择前往<a href="https://hexo.io/themes" target="_blank" rel="noopener">主题档案页</a>下载你所喜欢的主题，本部落格所使用的主题是由 <a href="https://github.com/zhwangart" target="_blank" rel="noopener">zhwangart</a> 设计并开发的 <a href="https://github.com/zhwangart/hexo-theme-ocean" target="_blank" rel="noopener">Ocean</a> 主题，并在其基础上进行一些移动端的适配优化和代码结构梳理，本文的末尾将会提供经修改后的主题文件。</p><p>前往 Github 下载后，会得到一个压缩包，将其中的文件夹解压到 <code>themes</code> 目录下后，就算是主题安装完毕了，个人建议对该文件夹进行一次重命名以便清晰化目录结构。</p><p>安装完成的主题并不能立即生效，我们需要在 Hexo 的主配置文件 <code>_config.yml</code> 上进行简单的配置，才可以完成整个操作，打开文件，在其中找到 <code>theme:</code> 字段，修改其值为你的主题文件夹名字，如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">'Ocean'</span>   <span class="string">//你的主题文件夹名</span></span><br></pre></td></tr></table></figure><p>至此，部落格的主题便完成了修改，而如果你希望对其进行二次开发或调整，则需要修改主题文件夹内的文件，主要包含以 ejs 语法编写的 HTML 模板，以及 stylus 语法编写的 CSS 文件，如果有一点 HTML 和 CSS 基础，这不会是一件很难的事，如果想进行更深的修改，就需要你对 Node.js 有一定的了解了，更详细的内容可以前往官网 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo.io</a>了解。</p><h1>三、生成文章并发到云端</h1><h2>1. 文章内容调试以及部落格生成</h2><p>进行到这一步，部落格已经完成了一半了，你可以选择先看看 markdown 语法，试着写一篇文章，或者使用默认的 hello-world.md 文件，作为接下来的操作示例。</p><p>Hexo 在本地提供了一个服务器环境的支持，你只需要到你的部落格文件夹下，执行以下命令，即可开启服务器，进行文章上传云端前的调节：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s    // hexo server 的缩写</span><br></pre></td></tr></table></figure><p>默认情况下 Hexo 会使用你主机的 4000 端口，如果你想使用别的端口，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -p 80    // 80 端口是主机的默认端口</span><br></pre></td></tr></table></figure><p>另外，默认情况下会使用 localhost 的 IP 地址为服务器地址，你也可以选用别的 IP 地址，但此处不作扩展，可以前往官网 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo.io</a>了解。</p><p>现在，你可以在浏览器的地址栏中输入 localhost ，进行部落格的访问了（如果使用默认端口，则访问 localhost:4000），但注意，当前这是一个局域网内的访问，并未接入外界的互联网。</p><p>但如果你在这个时候进行 markdown 文件的修改保存，会发现刷新页面并不能获得最新的文章内容，因为这个时候你的 markdown 文件并未被生成器生成，你需要在部落格目录的终端上执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -w    // hexo generate --watch 的缩写</span><br></pre></td></tr></table></figure><p>Hexo 的生成器将会监听部落格文件夹内的文件变化，进行实时的页面生成，这个时候你刷新就可以获得最新的文章内容了，但请注意，对部落格配置文件的修改并不会被监听，也就是你如果在这期间对部落格目录下的 <code>_config.yml</code> 文件进行修改，将不会在浏览器刷新后获得最新文章的响应，需要你重新执行 Hexo 服务器或生成器的命令。</p><p>如需删除某篇文章，可直接删除该文章的 markdown 文件，并执行以下命令，刷新页面即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h2>2. 云端的部落格</h2><p><em>备注：以下操作以上传到 github.io 仓库为例，并默认你已有一个启动了 Github Pages 功能的仓库，如需上传到其它服务器或使用 git 外的其它工具进行传输，请参考官网的<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">例子</a>，Github Pages 以及 github.io 的相关问题不在本文范围内，如希望了解可联系本人，或借助搜索引擎寻找答案</em></p><p>在文章都写好之后，需要将其放到外部网络可以访问的站点（如果不需要的话可以直接跳到文末），如 Github ，Hexo 对上传到 Github 提供了很便捷的命令，首先我们需要配置 git 的用户名和密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">'你的 Github 用户名'</span></span><br><span class="line">$ git config --global user.email <span class="string">'你的 Github 邮箱'</span></span><br></pre></td></tr></table></figure><p>并且安装 Hexo 的 git 工具，执行以下代码，进入部落格目录下的终端，并进行安装操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /d D:\Blog</span><br><span class="line">$ <span class="built_in">npm</span> i hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后配置部落格目录下的 <code>_config.yml</code> 文件，修改末尾的 <code>deploy</code> 字段相关内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span>     <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span>     <span class="string">'你的 github.io 仓库的地址'</span></span><br></pre></td></tr></table></figure><p>最后，执行以下命令同步你的部落格，就可以前往你的 github.io 查看效果了，但因为存在生效时延的问题，可能需要等待几分钟才会看到效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d    // hexo deploy 的缩写</span><br></pre></td></tr></table></figure><p><em>备注：第一次配置 git 进行同步时，需要输入 github 的用户名和密码</em></p><h1>四、写在最后</h1><p>花了几天时间熟悉 Hexo 的架构，修改主题文件为我喜欢的样子（还顺带解决了一个 Hexo 的 BUG），将搭建过程作为我的第一篇文章写下来，可能写的不太好，但会是一个不错的开端（至少我是这样子觉得的）。想着在未来的一段时间内，将我从事前端开发的这几个月间遇到的问题和解决方案，一个个写成文章并发到这里，感觉也是一个不错的成就呢 ~ ~</p><p>之前被我修改过的主题的 Git 地址：<a href="https://github.com/XAIOS/Hexo-AlphaDust-Mine" target="_blank" rel="noopener">AlphaDust</a></p><p>当前被我修改过的主题的 Git 地址：<a href="https://github.com/XAIOS/Hexo-Ocean-Mine" target="_blank" rel="noopener">Ocean</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
